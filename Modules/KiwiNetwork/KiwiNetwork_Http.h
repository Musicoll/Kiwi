/*
 ==============================================================================
 
 This file is part of the KIWI library.
 - Copyright (c) 2014-2016, Pierre Guillot & Eliott Paris.
 - Copyright (c) 2016-2017, CICM, ANR MUSICOLL, Eliott Paris, Pierre Guillot, Jean Millot.
 
 Permission is granted to use this software under the terms of the GPL v3
 (or any later version). Details can be found at: www.gnu.org/licenses
 
 KIWI is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 
 ------------------------------------------------------------------------------
 
 Contact : cicm.mshparisnord@gmail.com
 
 ==============================================================================
 */

#pragma once

#include <memory>
#include <chrono>
#include <functional>
#include <future>
#include <iostream>

#include <boost/asio.hpp>
#include <boost/asio/steady_timer.hpp>

#include <beast/http.hpp>
#include <beast/core.hpp>

namespace kiwi { namespace network {
    
    using tcp = boost::asio::ip::tcp;
    
    // ================================================================================ //
    //                                        HTTP                                      //
    // ================================================================================ //
    
    class Http
    {
    public: // methods
        
        //template<class ResponseType>
        //using Response = beast::http::response<ResponseType>;
        
        template<class ResponseType>
        class Response;
        
        template<class RequestType>
        using Request = beast::http::request<RequestType>;
        
        using Timeout = std::chrono::milliseconds;
        
        using Error = beast::error_code;
        
        class Payload;
        class Parameters;
        
        //! @brief Sends an http request.
        //! @details Returns the response generated by the server. The function blocks until response
        //! is received or error occurs.
        template<class ReqType, class ResType>
        static Response<ResType>
        write(std::unique_ptr<Request<ReqType>> request,
              std::string port,
              Error& error,
              Timeout timeout = Timeout(0));
        
        //! @brief Sends an http request asynchronously.
        //! @details Returns the response generated by the server. The function is non blocking. callback
        //! is called on another thread once response is received or error occurs.
        template <class ReqType, class ResType>
        static std::future<void>
        writeAsync(std::unique_ptr<Request<ReqType>> request,
                   std::string port,
                   std::function<void(Response<ResType>, Error)> callback,
                   Timeout timeout = Timeout(0));
        
    private: // nested classes
        
        template<class ReqType, class ResType> class Query;
        
    private: // deleted methods
        
        Http() = delete;
        Http(Http const& other) = delete;
        Http(Http && other) = delete;
        Http& operator=(Http const& other) = delete;
        Http& operator=(Http && other) = delete;
    };
    
    // ================================================================================ //
    //                                  HTTP PAYLOAD                                    //
    // ================================================================================ //
    
    class Http::Payload
    {
    public:
        
        struct Pair;
        
        template <class It>
        Payload(const It begin, const It end);
        
        Payload(std::initializer_list<Pair> const& pairs);
        
        void AddPair(Pair const& pair);
        
        std::string content;
    };
    
    // ================================================================================ //
    //                                 HTTP PARAMETERS                                  //
    // ================================================================================ //
    
    class Http::Parameters
    {
    public:
        
        struct Parameter;
        
        Parameters() = default;
        Parameters(const std::initializer_list<Parameter>& parameters);
        
        void AddParameter(Parameter const& parameter);
        
        std::string content;
    };
    
    struct Http::Parameters::Parameter
    {
        template <typename KeyType, typename ValueType>
        Parameter(KeyType&& key, ValueType&& value);
        
        std::string key;
        std::string value;
    };
    
    // ================================================================================ //
    //                                   HTTP RESPONSE                                  //
    // ================================================================================ //
    
    template<class ResponseType>
    class Http::Response : public beast::http::response<ResponseType>
    {
    public:
    };
    
    // ================================================================================ //
    //                                     HTTP QUERY                                   //
    // ================================================================================ //
    
    template<class ReqType, class ResType>
    class Http::Query
    {
    public: // methods
        
        //! @brief Constructor.
        Query(std::unique_ptr<Http::Request<ReqType>> request,
              std::string port,
              Http::Timeout timeout = Http::Timeout(0));
        
        //! @brief Destructor.
        ~Query();
        
        //! @brief Write the request and get the response.
        Http::Response<ResType> writeRequest(beast::error_code& error);
        
    private: // methods
        
        //! @internal
        void handleTimeout(beast::error_code const& error);
        
        //! @internal
        void connect(beast::error_code const& error,
                     tcp::resolver::iterator iterator);
        
        //! @internal
        void write(beast::error_code const& error);
        
        //! @internal
        void read(beast::error_code const& error);
        
        //! @internal
        void shutdown(beast::error_code const& error);
        
    private: // members
        
        std::unique_ptr<Http::Request<ReqType>>         m_request;
        Http::Response<ResType>                         m_response;
        Http::Error                                     m_error;
        Http::Timeout                                   m_timeout;
        
        std::string                                     m_port;
        boost::asio::io_service                         m_io_service;
        tcp::socket                                     m_socket;
        boost::asio::steady_timer                       m_timer;
        beast::flat_buffer                              m_buffer;
        
    private: // deleted methods
        
        Query() = delete;
        Query(Query const& other) = delete;
        Query(Query && other) = delete;
        Query& operator=(Query const& other) = delete;
        Query& operator=(Query && other) = delete;
    };
    
}} // namespace kiwi::network

#include "KiwiNetwork_Http.hpp"
